

def user_list(outputFormat,sessionname):

    url = DataUtils.GetUrl(sessionname)
    TOKEN = DataUtils.GetAuthToken(sessionname)
    CRVERSION = DataUtils.GetCRVersion(sessionname)

    IsVersionSupported,CallType,ApiUri,Headers,Body = get_user_list_resources(CRVERSION,sessionname,TOKEN)

    if not IsVersionSupported:
        logging.debug("Unsupported CR Version: {}".format(crversion))
        print("Unsupported CR Version")
        exit(1)

    FULLURL = urllib.parse.urljoin(url,ApiUri)

    response = requests.request(method=CallType, url=FULLURL, data=Body, headers=Headers)

    isAPICallOK = StdResponses.processAPIResponse(response)
    if(not isAPICallOK):
        exit(99)
    else:
        json_object = json.loads(response.text)
        if (outputFormat == "DF"):
            #print(json_object)
            aDF = UsersTransformers.GetUserListAsCsv(json_object)
            print(aDF)
        elif (outputFormat == "CSV"):
            #print(json_object)
            aDF = UsersTransformers.GetUserListAsCsv(json_object)
            print(aDF.to_csv(index=False))
        else:
            #print(json_object)
            json_formatted_str = json.dumps(json_object, indent=2)
            print(json_formatted_str)

    #isInError = RolesResponses.Process_list_Response(response,CsvOutput)



def bot_update(outputFormat,sessionname,UpdatedObjectDefAsJson,ObjID):

url = DataUtils.GetUrl(sessionname)
TOKEN = DataUtils.GetAuthToken(sessionname)
CRVERSION = DataUtils.GetCRVersion(sessionname)

IsVersionSupported,CallType,ApiUri,Headers,Body = get_bot_update_resources(CRVERSION,sessionname,TOKEN,UpdatedObjectDefAsJson,ObjID)

if not IsVersionSupported:
    logging.debug("Unsupported CR Version: {}".format(crversion))
    print("Unsupported CR Version")
    exit(1)

FULLURL = urllib.parse.urljoin(url,ApiUri)

response = requests.request(method=CallType, url=FULLURL, data=Body, headers=Headers)

isAPICallOK = StdResponses.processAPIResponse(response)
if(not isAPICallOK):
    exit(99)
else:
    json_object = json.loads(response.text)
    if (outputFormat == "DF"):
        aDF = pd.DataFrame(json_object, index=[0])

        print(aDF)

    elif (outputFormat == "CSV"):
        aDF = pd.DataFrame(json_object, index=[0])
        print(aDF.to_csv(index=False))
    else:
        json_formatted_str = json.dumps(json_object, indent=2)
        print(json_formatted_str)


        def bot_list(outputFormat,sessionname,objNameFilter):

            url = DataUtils.GetUrl(sessionname)
            TOKEN = DataUtils.GetAuthToken(sessionname)
            CRVERSION = DataUtils.GetCRVersion(sessionname)

            IsVersionSupported,CallType,ApiUri,Headers,Body = get_bot_list_resources(CRVERSION,sessionname,TOKEN,objNameFilter)

            if not IsVersionSupported:
                logging.debug("Unsupported CR Version: {}".format(crversion))
                print("Unsupported CR Version")
                exit(1)

            FULLURL = urllib.parse.urljoin(url,ApiUri)

            response = requests.request(method=CallType, url=FULLURL, data=Body, headers=Headers)

            isAPICallOK = StdResponses.processAPIResponse(response)
            if(not isAPICallOK):
                exit(99)
            else:
                json_object = json.loads(response.text)
                if (outputFormat == "DF"):
                    #print(json_object)
                    aDF = ObjectsTransformers.GetListAsCsv(json_object)
                    print(aDF)
                elif (outputFormat == "CSV"):
                    #print(json_object)
                    aDF = ObjectsTransformers.GetListAsCsv(json_object)
                    print(aDF.to_csv(index=False))
                else:
                    #print(json_object)
                    json_formatted_str = json.dumps(json_object, indent=2)
                    print(json_formatted_str)


                    def bot_show(outputFormat,sessionname,ObjID):

                        url = DataUtils.GetUrl(sessionname)
                        TOKEN = DataUtils.GetAuthToken(sessionname)
                        CRVERSION = DataUtils.GetCRVersion(sessionname)

                        IsVersionSupported,CallType,ApiUri,Headers,Body = get_bot_show_resources(CRVERSION,sessionname,TOKEN,ObjID)

                        if not IsVersionSupported:
                            logging.debug("Unsupported CR Version: {}".format(crversion))
                            print("Unsupported CR Version")
                            exit(1)

                        FULLURL = urllib.parse.urljoin(url,ApiUri)

                        response = requests.request(method=CallType, url=FULLURL, data=Body, headers=Headers)

                        isAPICallOK = StdResponses.processAPIResponse(response)
                        if(not isAPICallOK):
                            exit(99)
                        else:
                            json_object = json.loads(response.text)
                            json_formatted_str = json.dumps(json_object, indent=2)
                            return json_formatted_str


                            def list_learning_instance_groups(outputFormat,sessionname,LiId):

                                url = DataUtils.GetUrl(sessionname)
                                TOKEN = DataUtils.GetAuthToken(sessionname)
                                CRVERSION = DataUtils.GetCRVersion(sessionname)

                                IsVersionSupported,CallType,ApiUri,Headers,Body = get_li_grp_list_resources(CRVERSION,sessionname,TOKEN,LiId)

                                if not IsVersionSupported:
                                    logging.debug("Unsupported CR Version: {}".format(crversion))
                                    print("Unsupported CR Version")
                                    exit(1)

                                FULLURL = urllib.parse.urljoin(url,ApiUri)
                                #print(FULLURL)
                                #print(CallType)
                                #print(Headers)

                                response = requests.request(method=CallType, url=FULLURL, data=Body, headers=Headers)

                                isAPICallOK = StdResponses.processAPIResponse(response)
                                if(not isAPICallOK):
                                    exit(99)
                                else:
                                    json_object = json.loads(response.text)
                                    if (outputFormat == "DF"):
                                        #print(json_object)
                                        aDF = IQBotLITransformers.GetLIGroupListAsCsv(json_object)
                                        print(aDF)
                                    elif (outputFormat == "CSV"):
                                        #print(json_object)
                                        aDF = IQBotLITransformers.GetLIGroupListAsCsv(json_object)
                                        print(aDF.to_csv(index=False))
                                    else:
                                        #print(json_object)
                                        json_formatted_str = json.dumps(json_object, indent=2)
                                        print(json_formatted_str)
